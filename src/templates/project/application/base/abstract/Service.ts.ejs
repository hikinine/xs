
interface BaseValidation<T> {
  execute(dto: unknown | T): Promise<void>
}
export type InjectableDependencies<InjectedRepositories, InjectedServices> = {
 
  services: InjectedServices
  repository: InjectedRepositories
}


export class Service<InjectedRepositories, InjectedServices> {

  protected services: InjectedServices
  protected repository: InjectedRepositories
  protected validation: BaseValidation<unknown>

  override(props: {
    repository: InjectedRepositories,
    service: InjectedServices
  }) {
    this.repository = props.repository
    this.services = props.service
  }
  constructor(props: InjectableDependencies<InjectedRepositories, InjectedServices>) {
    this.repository = props.repository;
    this.services = props.services
  }

}
