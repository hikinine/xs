import { user } from "@prisma/client";
import { Entity } from "../../../base/abstract/Entity";
import bcrypt from "bcrypt"

export class User extends Entity implements user {
  readonly refresh_token: any;


  id: string
  name: string  
  email: string    
  password: string  
  phone: string    
  privilege: number
  role: number
  status: boolean   
  createdAt: Date 
  updatedAt: Date 

  constructor(props: {
    id?: string
    name: string  
    email: string    
    password: string  
    phone: string    
    privilege?: number
    role?: number
    status?: boolean   
    createdAt?: Date 
    updatedAt?: Date 
  }) {
    super()


    this.id = Entity.createUUID(props.id);

    this.name = Entity.RequiredText(props.name, { length: [3, 50] });
    this.email = Entity.RequiredEmail(props.email, { length: [4, 100 ]})
    this.password = Entity.RequiredText(props.password, { length: [6, 100] })
    this.phone = Entity.RequiredText(props.phone, { length: [14, 15], mask: Entity.Mask.phone })
    this.status =  Entity.OptionalBoolean(props.status, { defaultValue: true })
    this.privilege = Entity.OptionalNumber(props.privilege, { defaultValue: 0 })
    this.role = Entity.OptionalNumber(props.role, { defaultValue: 0 })
    this.createdAt = Entity.CreatedAt(props.createdAt)
    this.updatedAt = Entity.UpdatedAt()
      
  }

  static EnsureEncryptedPasswordMatchWith(user: User, password: string) {
    const match = bcrypt.compareSync(password, user.password)

    if (!match) {
      throw new AuthorizationException(`Usu√°rio ou senha incorreta!`)
    }
  }

  static alreadyHasAnRefreshToken(user: User) {
    return Boolean((user as any)?.refresh_token?.id)
  }
}