import { UserLoginAuthenticateDTO } from './UserLoginAuthenticateDTO';
import { Service, InjectableDependencies } from "../../../base/abstract/Service"
import { UserLoginAuthenticateValidation } from './UserLoginAuthenticateValidation';
import { User } from '../../domain/entities/User';
import { Authorization , Level, Role} from '../../../base/abstract/Authorization';
import { UserRepository } from './../../repositories/UserRepository';
import { RefreshTokenRepository } from './../../repositories/RefreshTokenRepository';
import { AuthenticateRepository } from './../../repositories/AuthenticateRepository';
import { randomBytes } from 'crypto';

interface Repositories {
  user: UserRepository,
  refreshToken: RefreshTokenRepository,
  authenticate: AuthenticateRepository
}
interface Services {}

export class UserLoginAuthenticateService extends Service<Repositories, Services> {
  constructor(props: InjectableDependencies<Repositories, Services>) {
    super(props)
  }

  async execute(dto: UserLoginAuthenticateDTO) {
    this.validation.execute(dto)

    const dbUser = await this.repository.user.findAll({
      where: {
         email: dto.email 
      },
      include: {
        refreshToken: true
      }
    });

    const [user] = dbUser.payload;
    
    User.EnsureEncryptedPasswordMatchWith(user, dto.password)
   
    let refreshToken = user?.refreshToken?.id

    if (!User.alreadyHasAnRefreshToken(user)) {
      refresh_token = await this.repository.refreshToken.createRefreshToken({
        id: randomBytes(48).toString("hex"),
        user_id: user.id
      })
    }

    const payload = {
      id: user.id,
      privilege: user.privilege,
      role: user.role
    };

    const access_token = this.repository.authenticate.signIn(
      payload,
      {
        subject: user.id,
        expiresIn: "12h"
      }
    )
    return { access_token, refresh_token, payload }
  }
}