import { exceptionController } from './../../../base/ApplicationExceptionController';
import { PrismaUserRepository } from './../../repositories/implementation/PrismaUserRepository';
import { UserLoginAuthenticateValidation } from './UserLoginAuthenticateValidation';
import { UserLoginAuthenticateService } from './UserLoginAuthenticateService';
import { UserLoginAuthenticateController } from './UserLoginAuthenticateController';
import { Level, Role } from '../../../base/abstract/Authorization';
import { PrismaRefreshTokenRepository } from '../../repositories/implementation/PrismaRefreshTokenRepository';
import { JWTAuthenticateRepository } from '../../repositories/implementation/JWTAuthenticateRepository';
import { prismaInstance } from './../../../shared/infra/database/prisma/client';

const repository = {
  user: PrismaUserRepository.getInstance(prismaInstance),
  refreshToken: PrismaRefreshTokenRepository.getInstance(prismaInstance),
  authenticate: JWTAuthenticateRepository.getInstance()
}
const services = {}

const validation = new UserLoginAuthenticateValidation();

const authorization = {
  role: Role.User,
  level: Level.Free
}

export const userLoginAuthenticateService = new UserLoginAuthenticateService({
  services,
  repository,
  validation,
  authorization
});

export const userLoginAuthenticateController =
  new UserLoginAuthenticateController({
    service: userLoginAuthenticateService,
    exceptionController
  });
